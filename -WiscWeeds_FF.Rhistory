model <- glmmTMB(surv ~ trt, data = data, family = ziGamma(link = "inverse"))
model <- glmmTMB(surv ~ trt, data = data, family = binomial(link = "logit"))
glmm
summary(model)
resid <- simulateResiduals(model)
plot(resid)
glmmTMB:::Anova.glmmTMB(model)
model <- glmmTMB(surv ~ trt, data = data, family = gaussian(link = "identity"))
summary(model)
resid <- simulateResiduals(model)
plot(resid)
glmmTMB:::Anova.glmmTMB(model)
model <- glmmTMB(surv ~ trt, data = data, family = poisson(link = "log"))
summary(model)
resid <- simulateResiduals(model)
plot(resid)
glmmTMB:::Anova.glmmTMB(model)
model <- glmmTMB(surv ~ trt, data = data, family = quasibinomial(link = "logit"))
model <- glmmTMB(surv ~ trt, data = data, family = binomial(link = "logit"))
summary(model)
resid <- simulateResiduals(model)
plot(resid)
glmmTMB:::Anova.glmmTMB(model)
emm_trt <- emmeans(model, ~ trt, adjust = "tukey", type = "response", contr = "pairwise")
emm_trt
CLD_emm_trt <- if(requireNamespace("multcomp")) {
multcomp::cld(emm_trt$emmeans, alpha = 0.05, Letters=letters, adjust="tukey", reversed = TRUE)}
CLD_emm_trt
data <- read.csv("data_redroot_reduction2.csv")
str(data)
data$run <- as.factor(data$run)
data$trt <- as.factor(data$trt)
data$rep <- as.factor(data$rep)
str(data)
model <- glmmTMB(surv ~ trt, data = data, family = binomial(link = "logit"))
summary(model)
resid <- simulateResiduals(model)
plot(resid)
glmmTMB:::Anova.glmmTMB(model)
emm_trt <- emmeans(model, ~ trt, adjust = "tukey", type = "response", contr = "pairwise")
emm_trt
CLD_emm_trt <- if(requireNamespace("multcomp")) {
multcomp::cld(emm_trt$emmeans, alpha = 0.05, Letters=letters, adjust="tukey", reversed = TRUE)}
CLD_emm_trt
data <- read.csv("data_redroot_reduction2.csv")
str(data)
data$run <- as.factor(data$run)
data$trt <- as.factor(data$trt)
data$rep <- as.factor(data$rep)
str(data)
model <- glmmTMB(surv ~ trt, data = data, family = binomial(link = "logit"))
summary(model)
resid <- simulateResiduals(model)
plot(resid)
glmmTMB:::Anova.glmmTMB(model)
emm_trt <- emmeans(model, ~ trt, adjust = "tukey", type = "response", contr = "pairwise")
emm_trt
CLD_emm_trt <- if(requireNamespace("multcomp")) {
multcomp::cld(emm_trt$emmeans, alpha = 0.05, Letters=letters, adjust="tukey", reversed = TRUE)}
CLD_emm_trt
data <- read.csv("data_redroot_reduction2.csv")
str(data)
data$run <- as.factor(data$run)
data$trt <- as.factor(data$trt)
data$rep <- as.factor(data$rep)
str(data)
model <- glmmTMB(surv ~ trt, data = data, family = binomial(link = "logit"))
summary(model)
resid <- simulateResiduals(model)
plot(resid)
glmmTMB:::Anova.glmmTMB(model)
knitr::opts_chunk$set(echo = TRUE)
library(car)
library(glmmTMB)
library(DHARMa)
library(emmeans)
library(ggplot2)
data <- read.csv("data_sorghum_reduction.csv")
View(data)
data <- read.csv("data_sorghum_reduction.csv")
str(data)
data$run <- as.factor(data$run)
data$trt <- as.factor(data$trt)
data$rep <- as.factor(data$rep)
str(data)
View(data)
model <- glmmTMB(bio_red ~ trt, data = data, family = beta_family())
summary(model)
resid <- simulateResiduals(model)
plot(resid)
glmmTMB:::Anova.glmmTMB(model)
emm_trt <- emmeans(model, ~ trt, adjust = "tukey", type = "response", contr = "pairwise")
emm_trt
CLD_emm_trt <- if(requireNamespace("multcomp")) {
multcomp::cld(emm_trt$emmeans, alpha = 0.05, Letters=letters, adjust="tukey", reversed = TRUE)}
install.packages("multcompView")
knitr::opts_chunk$set(echo = TRUE)
library(car)
library(glmmTMB)
library(DHARMa)
library(emmeans)
library(ggplot2)
emm_trt <- emmeans(model, ~ trt, adjust = "tukey", type = "response", contr = "pairwise")
emm_trt
CLD_emm_trt <- if(requireNamespace("multcomp")) {
multcomp::cld(emm_trt$emmeans, alpha = 0.05, Letters=letters, adjust="tukey", reversed = TRUE)}
CLD_emm_trt
plot(emm_trt, adjust = "tukey", comparisons = F, alpha = 0.05,  horizontal = T) +
geom_point(size = 2) +
geom_text(aes(label = c("d", "cd", "e", "cd", "bcd", "abc", "a", "abc", "cd", "ab")),
vjust = -0.8, size = 4) +
scale_x_continuous(breaks = c(0, 0.25, 0.50, 0.75, 1), limits = c(0, 1),
labels = scales::percent_format(scale = 100, suffix = "")) +
labs(#title = "Waterhemp Biomass Reduction - POST",
x = "Biomass Reduction 28 DAT (%)",
y = "Treatment") +
theme_bw() +
theme (plot.title = element_text(face = "bold", hjust = 0.5, size = 18, colour = "darkgreen"),
axis.title = element_text(face = "bold", size = 18, colour = "darkgreen"),
axis.text= element_text(face = "bold", size = 14, colour = "black"))
ggsave("ANOVA_sorghum_biomass.tiff", units="in", width = 10, height = 8, dpi = 600, compression = "lzw")
knitr::opts_chunk$set(echo = TRUE)
library(car)
library(glmmTMB)
library(DHARMa)
library(emmeans)
library(ggplot2)
data <- read.csv("data_sorghum_reduction.csv")
str(data)
data$run <- as.factor(data$run)
data$trt <- as.factor(data$trt)
data$rep <- as.factor(data$rep)
str(data)
model <- glmmTMB(vr_7dat ~ trt, data = data, family = beta_family())
summary(model)
resid <- simulateResiduals(model)
plot(resid)
glmmTMB:::Anova.glmmTMB(model)
emm_trt <- emmeans(model, ~ trt, adjust = "tukey", type = "response", contr = "pairwise")
emm_trt
CLD_emm_trt <- if(requireNamespace("multcomp")) {
multcomp::cld(emm_trt$emmeans, alpha = 0.05, Letters=letters, adjust="tukey", reversed = TRUE)}
CLD_emm_trt
plot(emm_trt, adjust = "tukey", comparisons = F, alpha = 0.05,  horizontal = T) +
geom_point(size = 2) +
geom_text(aes(label = c("d", "c", "e", "c", "b", "ab", "a", "a", "ab", "a")),
vjust = -0.8, size = 4) +
scale_x_continuous(breaks = c(0, 0.25, 0.50, 0.75, 1), limits = c(0, 1),
labels = scales::percent_format(scale = 100, suffix = "")) +
labs(#title = "Waterhemp Biomass Reduction - POST",
x = "Control 7 DAT (%)",
y = "Treatment") +
theme_bw() +
theme (plot.title = element_text(face = "bold", hjust = 0.5, size = 18, colour = "darkgreen"),
axis.title = element_text(face = "bold", size = 18, colour = "darkgreen"),
axis.text= element_text(face = "bold", size = 14, colour = "black"))
ggsave("ANOVA_sorghum_vr_7DAT.tiff", units="in", width = 10, height = 8, dpi = 600, compression = "lzw")
knitr::opts_chunk$set(echo = TRUE)
library(car)
library(glmmTMB)
library(DHARMa)
library(emmeans)
library(ggplot2)
data <- read.csv("data_sorghum_reduction.csv")
str(data)
data$run <- as.factor(data$run)
data$trt <- as.factor(data$trt)
data$rep <- as.factor(data$rep)
str(data)
model <- glmmTMB(vr_14dat ~ trt, data = data, family = beta_family())
summary(model)
resid <- simulateResiduals(model)
plot(resid)
glmmTMB:::Anova.glmmTMB(model)
emm_trt <- emmeans(model, ~ trt, adjust = "tukey", type = "response", contr = "pairwise")
emm_trt
CLD_emm_trt <- if(requireNamespace("multcomp")) {
multcomp::cld(emm_trt$emmeans, alpha = 0.05, Letters=letters, adjust="tukey", reversed = TRUE)}
CLD_emm_trt
plot(emm_trt, adjust = "tukey", comparisons = F, alpha = 0.05,  horizontal = T) +
geom_point(size = 2) +
geom_text(aes(label = c("f", "f", "g", "ef", "cde", "abc", "a", "ab", "def", "bcd")),
vjust = -0.8, size = 4) +
scale_x_continuous(breaks = c(0, 0.25, 0.50, 0.75, 1), limits = c(0, 1),
labels = scales::percent_format(scale = 100, suffix = "")) +
labs(#title = "Waterhemp Biomass Reduction - POST",
x = "Control 14 DAT (%)",
y = "Treatment") +
theme_bw() +
theme (plot.title = element_text(face = "bold", hjust = 0.5, size = 18, colour = "darkgreen"),
axis.title = element_text(face = "bold", size = 18, colour = "darkgreen"),
axis.text= element_text(face = "bold", size = 14, colour = "black"))
ggsave("ANOVA_sorghum_vr_14DAT.tiff", units="in", width = 10, height = 8, dpi = 600, compression = "lzw")
knitr::opts_chunk$set(echo = TRUE)
library(car)
library(glmmTMB)
library(DHARMa)
library(emmeans)
library(ggplot2)
data <- read.csv("data_sorghum_reduction.csv")
str(data)
data$run <- as.factor(data$run)
data$trt <- as.factor(data$trt)
data$rep <- as.factor(data$rep)
str(data)
model <- glmmTMB(vr_21dat ~ trt, data = data, family = beta_family())
summary(model)
resid <- simulateResiduals(model)
plot(resid)
glmmTMB:::Anova.glmmTMB(model)
emm_trt <- emmeans(model, ~ trt, adjust = "tukey", type = "response", contr = "pairwise")
emm_trt
CLD_emm_trt <- if(requireNamespace("multcomp")) {
multcomp::cld(emm_trt$emmeans, alpha = 0.05, Letters=letters, adjust="tukey", reversed = TRUE)}
CLD_emm_trt
plot(emm_trt, adjust = "tukey", comparisons = F, alpha = 0.05,  horizontal = T) +
geom_point(size = 2) +
geom_text(aes(label = c("e", "d", "f", "de", "bc", "ab", "a", "ab", "cd", "ab")),
vjust = -0.8, size = 4) +
scale_x_continuous(breaks = c(0, 0.25, 0.50, 0.75, 1), limits = c(0, 1),
labels = scales::percent_format(scale = 100, suffix = "")) +
labs(#title = "Waterhemp Biomass Reduction - POST",
x = "Control 21 DAT (%)",
y = "Treatment") +
theme_bw() +
theme (plot.title = element_text(face = "bold", hjust = 0.5, size = 18, colour = "darkgreen"),
axis.title = element_text(face = "bold", size = 18, colour = "darkgreen"),
axis.text= element_text(face = "bold", size = 14, colour = "black"))
ggsave("ANOVA_sorghum_vr_21DAT.tiff", units="in", width = 10, height = 8, dpi = 600, compression = "lzw")
knitr::opts_chunk$set(echo = TRUE)
library(car)
library(glmmTMB)
library(DHARMa)
library(emmeans)
library(ggplot2)
data <- read.csv("data_sorghum_reduction.csv")
str(data)
data$run <- as.factor(data$run)
data$trt <- as.factor(data$trt)
data$rep <- as.factor(data$rep)
str(data)
data <- read.csv("data_sorghum_reduction.csv")
str(data)
data$run <- as.factor(data$run)
data$trt <- as.factor(data$trt)
data$rep <- as.factor(data$rep)
str(data)
model <- glmmTMB(vr_28dat ~ trt, data = data, family = beta_family())
summary(model)
resid <- simulateResiduals(model)
plot(resid)
glmmTMB:::Anova.glmmTMB(model)
emm_trt <- emmeans(model, ~ trt, adjust = "tukey", type = "response", contr = "pairwise")
emm_trt
CLD_emm_trt <- if(requireNamespace("multcomp")) {
multcomp::cld(emm_trt$emmeans, alpha = 0.05, Letters=letters, adjust="tukey", reversed = TRUE)}
CLD_emm_trt
plot(emm_trt, adjust = "tukey", comparisons = F, alpha = 0.05,  horizontal = T) +
geom_point(size = 2) +
geom_text(aes(label = c("e", "d", "f", "d", "bc", "ab", "a", "ab", "c", "a")),
vjust = -0.8, size = 4) +
scale_x_continuous(breaks = c(0, 0.25, 0.50, 0.75, 1), limits = c(0, 1),
labels = scales::percent_format(scale = 100, suffix = "")) +
labs(#title = "Waterhemp Biomass Reduction - POST",
x = "Control 28 DAT (%)",
y = "Treatment") +
theme_bw() +
theme (plot.title = element_text(face = "bold", hjust = 0.5, size = 18, colour = "darkgreen"),
axis.title = element_text(face = "bold", size = 18, colour = "darkgreen"),
axis.text= element_text(face = "bold", size = 14, colour = "black"))
ggsave("ANOVA_sorghum_vr_28DAT.tiff", units="in", width = 10, height = 8, dpi = 600, compression = "lzw")
knitr::opts_chunk$set(echo = TRUE)
library(drc)
knitr::opts_chunk$set(echo = TRUE)
library(drc)
library(doBy)
library(plotrix)
data <- read.csv("data_2022_108.csv")
str(data)
fun <- function(x){
c( mean = mean(x), VAR = var(x), SD = sd(x), SE = std.error(x), n = length(x))
}
summary.Reflex <- summaryBy(cbind(vr_7dat, vr_14dat, vr_21dat,biomass, surv) ~ rate + name, data = subset(data, name=="Reflex"),
FUN=fun)
summary.EXT1490 <- summaryBy(cbind(vr_7dat, vr_14dat, vr_21dat,biomass, surv) ~ rate + name, data = subset(data, name=="EXT 1490"),
FUN=fun)
model.LL4<- drm(vr_7dat ~ rate, name, fct = LL.4(),  data = data)
modelFit(model.LL4) # higher the p-value, better.
summary(model.LL4)
# c: lower limit (models with negative lower limit are biologically impossible. E.g., negative biomass, negative % biomass reduction, or negative % control)
# d: upper limit (models where the response variable is in %, upper limit bigger than 100% are biologically impossible. E.g., % biomass reduction, % control)
# b: slope around e (inflection point)
# e: e (inflection point). Represents the dose producing a response halfway between the u and l parameters (ED50)
getMeanFunctions(3)
getMeanFunctions(4)
mselect(model.LL4,  list(L.3(),  L.4(), L.5(), LL.2(), LL.3(), LL.3u(), LL2.3(), LL2.3u(), LL.4(), LL2.4(), LL.5(), W1.3(), W1.4(), W2.4(), baro5()),
linreg = T)
#LL.3 better option here (lower IC, which actually is AIC (default)). L.3 (logistic three parameter) could also be used, but since it is a asymmetrical model, I would give preference to LL.3. Moreover, there is no difference between for dose–response data, the logistic model offers no advantage over the log-logistic model (Ritz 2009). Additionally, in symmetrical models, the parameter e and relative ED50 are identical, that is, they both indicate the dose that reduces the response midway between the upper and lower limits. In asymmetrical models, however, the parameter e does not have the same meaning as in symmetrical models, even though it is still the location of the inflection point. For asymmetrical models, ED50 should be estimated as "absolute" and not relative.
model.LL3<- drm(vr_7dat ~ rate, name, fct = LL.3(),  data = data, type = "continuous")
model.L.3<- drm(vr_7dat ~ rate, name, fct = L.3(),  data = data, type = "continuous")
modelFit(model.LL3)
modelFit(model.L.3)
summary(model.LL3) # NO parameter c (lower limit). It means lower limit was set to zero.
summary(model.L.3)
anova(model.LL4, model.L.3) # p-value > 0.05 means that there is no difference between models. Therefore, we can use model LL.3
ED(model.LL3, c(50, 90), type = "relative")
# Estimated doses required for ED50, and ED90. Estimation of ED90 is statistically less accurate and often subject to high variance. Therefore, is better to use ED50.
EDcomp(model.LL3, c(50, 50), type = "relative", interval = "none", reverse = TRUE)
# Comparing e parameter (ED50)
compParm(model.LL3, strVal = "e", operator = "-") #here comparing the difference, and not the ratio like in the EDcomp
EDcomp(model.LL3, c(50, 50), type = "relative", interval = "none", reverse = TRUE)
# Comparing e parameter (ED50)
compParm(model.LL3, strVal = "e", operator = "-") #here comparing the difference, and not the ratio like in the EDcomp
knitr::opts_chunk$set(echo = TRUE)
library(drc)
library(doBy)
library(plotrix)
data <- read.csv("data_2022_108.csv")
str(data)
fun <- function(x){
c( mean = mean(x), VAR = var(x), SD = sd(x), SE = std.error(x), n = length(x))
}
summary.Reflex <- summaryBy(cbind(vr_7dat, vr_14dat, vr_21dat,biomass, surv) ~ rate + name, data = subset(data, name=="Reflex"),
FUN=fun)
summary.EXT1490 <- summaryBy(cbind(vr_7dat, vr_14dat, vr_21dat,biomass, surv) ~ rate + name, data = subset(data, name=="EXT 1490"),
FUN=fun)
model.LL4<- drm(vr_14dat ~ rate, name, fct = LL.4(),  data = data)
modelFit(model.LL4) # higher the p-value, better.
summary(model.LL4)
# c: lower limit (models with negative lower limit are biologically impossible. E.g., negative biomass, negative % biomass reduction, or negative % control)
# d: upper limit (models where the response variable is in %, upper limit bigger than 100% are biologically impossible. E.g., % biomass reduction, % control)
# b: slope around e (inflection point)
# e: e (inflection point). Represents the dose producing a response halfway between the u and l parameters (ED50)
getMeanFunctions(3)
getMeanFunctions(4)
mselect(model.LL4,  list(L.3(),  L.4(), L.5(), LL.2(), LL.3(), LL.3u(), LL2.3(), LL2.3u(), LL.4(), LL2.4(), LL.5(), W1.3(), W1.4(), W2.4(), baro5()),
linreg = T)
#LL.3 better option here (lower IC, which actually is AIC (default)). L.3 (logistic three parameter) could also be used, but since it is a asymmetrical model, I would give preference to LL.3. Moreover, there is no difference between for dose–response data, the logistic model offers no advantage over the log-logistic model (Ritz 2009). Additionally, in symmetrical models, the parameter e and relative ED50 are identical, that is, they both indicate the dose that reduces the response midway between the upper and lower limits. In asymmetrical models, however, the parameter e does not have the same meaning as in symmetrical models, even though it is still the location of the inflection point. For asymmetrical models, ED50 should be estimated as "absolute" and not relative.
model.LL3<- drm(vr_14dat ~ rate, name, fct = LL.3(),  data = data, type = "continuous")
modelFit(model.LL3)
summary(model.LL3) # NO parameter c (lower limit). It means lower limit was set to zero.
anova(model.LL4, model.LL3) # p-value > 0.05 means that there is no difference between models. Therefore, we can use model LL.3
ED(model.LL3, c(50, 90), type = "relative")
# Estimated doses required for ED50, and ED90. Estimation of ED90 is statistically less accurate and often subject to high variance. Therefore, is better to use ED50.
EDcomp(model.LL3, c(50, 50), type = "relative", interval = "none", reverse = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(drc)
library(doBy)
library(plotrix)
data <- read.csv("data_2022_108.csv")
str(data)
fun <- function(x){
c( mean = mean(x), VAR = var(x), SD = sd(x), SE = std.error(x), n = length(x))
}
summary.Reflex <- summaryBy(cbind(vr_7dat, vr_14dat, vr_21dat,biomass, surv) ~ rate + name, data = subset(data, name=="Reflex"),
FUN=fun)
summary.EXT1490 <- summaryBy(cbind(vr_7dat, vr_14dat, vr_21dat,biomass, surv) ~ rate + name, data = subset(data, name=="EXT 1490"),
FUN=fun)
model.LL4<- drm(vr_21dat ~ rate, name, fct = LL.4(),  data = data)
modelFit(model.LL4) # higher the p-value, better.
summary(model.LL4)
# c: lower limit (models with negative lower limit are biologically impossible. E.g., negative biomass, negative % biomass reduction, or negative % control)
# d: upper limit (models where the response variable is in %, upper limit bigger than 100% are biologically impossible. E.g., % biomass reduction, % control)
# b: slope around e (inflection point)
# e: e (inflection point). Represents the dose producing a response halfway between the u and l parameters (ED50)
getMeanFunctions(3)
getMeanFunctions(4)
mselect(model.LL4,  list(L.3(),  L.4(), L.5(), LL.2(), LL.3(), LL.3u(), LL2.3(), LL2.3u(), LL.4(), LL2.4(), LL.5(), W1.3(), W1.4(), W2.4(), baro5()),
linreg = T)
#LL.3 better option here (lower IC, which actually is AIC (default)). L.3 (logistic three parameter) could also be used, but since it is a asymmetrical model, I would give preference to LL.3. Moreover, there is no difference between for dose–response data, the logistic model offers no advantage over the log-logistic model (Ritz 2009). Additionally, in symmetrical models, the parameter e and relative ED50 are identical, that is, they both indicate the dose that reduces the response midway between the upper and lower limits. In asymmetrical models, however, the parameter e does not have the same meaning as in symmetrical models, even though it is still the location of the inflection point. For asymmetrical models, ED50 should be estimated as "absolute" and not relative.
model.LL3<- drm(vr_21dat ~ rate, name, fct = LL.3(),  data = data, type = "continuous")
modelFit(model.LL3)
summary(model.LL3) # NO parameter c (lower limit). It means lower limit was set to zero.
anova(model.LL4, model.LL3) # p-value > 0.05 means that there is no difference between models. Therefore, we can use model LL.3
ED(model.LL3, c(50, 90), type = "relative")
# Estimated doses required for ED50, and ED90. Estimation of ED90 is statistically less accurate and often subject to high variance. Therefore, is better to use ED50.
EDcomp(model.LL3, c(50, 50), type = "relative", interval = "none", reverse = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(drc)
library(doBy)
library(plotrix)
data <- read.csv("data_2022_108.csv")
str(data)
fun <- function(x){
c( mean = mean(x), VAR = var(x), SD = sd(x), SE = std.error(x), n = length(x))
}
summary.Reflex <- summaryBy(cbind(vr_7dat, vr_14dat, vr_21dat,biomass, surv) ~ rate + name, data = subset(data, name=="Reflex"),
FUN=fun)
summary.EXT1490 <- summaryBy(cbind(vr_7dat, vr_14dat, vr_21dat,biomass, surv) ~ rate + name, data = subset(data, name=="EXT 1490"),
FUN=fun)
model.LL4<- drm((surv * 100) ~ rate, name, fct = LL.4(),  data = data)
modelFit(model.LL4) # higher the p-value, better.
summary(model.LL4)
# c: lower limit (models with negative lower limit are biologically impossible. E.g., negative biomass, negative % biomass reduction, or negative % control)
# d: upper limit (models where the response variable is in %, upper limit bigger than 100% are biologically impossible. E.g., % biomass reduction, % control)
# b: slope around e (inflection point)
# e: e (inflection point). Represents the dose producing a response halfway between the u and l parameters (ED50)
mselect(model.LL4,  list(L.3(), L.4(), L.5(), LL.2(), LL.3(), LL.5(), W1.3(), W1.4(), W2.4(), baro5()), linreg = T)
#LL.3 better option here (lower IC, which actually is AIC (default)). W1.3 could also be used, but since it is a asymmetrical model, I would give preference to LL.3 In symmetrical models, the parameter e and relative ED50 are identical, that is, they both indicate the dose that reduces the response midway between the upper and lower limits. In asymmetrical models, however, the parameter e does not have the same meaning as in symmetrical models, even though it is still the location of the inflection point. For asymmetrical models, ED50 should be estimated as "absolute" and not relative.
model.LL3<- drm((surv * 100)  ~ rate, name, fct = LL.3(),  data = data, type = "continuous")
modelFit(model.LL3)
summary(model.LL3) # NO parameter c (lower limit). It means lower limit was set to zero.
anova(model.LL3, model.LL4) # p-value > 0.05 means that there is no difference between models. Therefore, we can use model LL.3
ED(model.LL3, c(50, 90), type = "relative")
# Estimated doses required for ED50, and ED90. Estimation of ED90 is statistically less accurate and often subject to high variance. Therefore, is better to use ED50.
EDcomp(model.LL3, c(50, 50), type = "relative", interval = "none", reverse = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(car)
library(emmeans)
library(multcompView)
library(glmmTMB)
library(ggpubr)
waterhemp <- read.csv("All PRE_Reduction.csv")
str(waterhemp)
waterhemp$run <- as.factor(waterhemp$run)
waterhemp$pop <- as.factor(waterhemp$pop)
waterhemp$Herbicide <- as.factor(waterhemp$Herbicide)
waterhemp$Rate <- as.factor(waterhemp$Rate)
waterhemp$rep <- as.factor(waterhemp$rep)
str(waterhemp)
model <- glmmTMB(logit(count_red) ~ Herbicide * Rate + (1|run) + (1|pop), data = waterhemp, family = "gaussian")
summary(model)
glmmTMB:::Anova.glmmTMB(model)
emm_herb_rate<- emmeans(model, ~ Herbicide|Rate, adjust = "tukey", type = "response", contr = "pairwise")
emm_herb_rate
CLD_emm_herb_rate <- if(requireNamespace("multcomp")) {
multcomp::cld(emm_herb_rate$emmeans, alpha = 0.05, Letters=letters, adjust="tukey", reversed = TRUE)}
CLD_emm_herb_rate
waterhemp <- read.csv("All PRE_Reduction.csv")
str(waterhemp)
waterhemp$run <- as.factor(waterhemp$run)
waterhemp$pop <- as.factor(waterhemp$pop)
waterhemp$Herbicide <- as.factor(waterhemp$Herbicide)
waterhemp$Rate <- as.factor(waterhemp$Rate)
waterhemp$rep <- as.factor(waterhemp$rep)
str(waterhemp)
model <- glmmTMB(logit(count_red) ~ Herbicide * Rate + (1|run) + (1|pop), data = waterhemp, beta_family(link = "logit"))
waterhemp <- read.csv("All PRE_Reduction.csv")
str(waterhemp)
waterhemp$run <- as.factor(waterhemp$run)
waterhemp$pop <- as.factor(waterhemp$pop)
waterhemp$Herbicide <- as.factor(waterhemp$Herbicide)
waterhemp$Rate <- as.factor(waterhemp$Rate)
waterhemp$rep <- as.factor(waterhemp$rep)
str(waterhemp)
model <- glmmTMB(logit(count_red) ~ Herbicide * Rate + (1|run) + (1|pop), data = waterhemp, family = "gaussian")
summary(model)
glmmTMB:::Anova.glmmTMB(model)
emm_herb_rate<- emmeans(model, ~ Herbicide|Rate, adjust = "tukey", type = "response", contr = "pairwise")
emm_herb_rate
CLD_emm_herb_rate <- if(requireNamespace("multcomp")) {
multcomp::cld(emm_herb_rate$emmeans, alpha = 0.05, Letters=letters, adjust="tukey", reversed = TRUE)}
CLD_emm_herb_rate
plot(emm_herb_rate, adjust = "tukey", comparisons = F, alpha = 0.05) +
geom_point(size = 1) +
geom_text(aes(label = c("c", "b", "a", "a", "a",
"b", "a", "a", "a", "a",
"b", "a", "a", "a", "a")),
vjust = -1, size = 4) +
scale_x_continuous(breaks = c(0, 0.25, 0.50, 0.75, 1), limits = c(0, 1),
labels = scales::percent_format(scale = 100, suffix = "")) +
labs(#title = "Waterhemp Plant Density Reduction - PRE",
x = "Plant Density Reduction (%)",
y = "Herbicide") +
facet_grid(~ Rate, labeller = label_both) +
theme_bw() +
theme (plot.title = element_text(face = "bold", hjust = 0.5, size = 22, colour = "darkgreen"),
axis.title = element_text(face = "bold", size = 18, colour = "darkgreen"),
axis.text = element_text(face = "bold", size = 13, colour = "black"),
strip.text = element_text(face = "bold", size = 13, colour = "black"))
plot(emm_herb_rate, adjust = "tukey", comparisons = T, alpha = 0.05) +
geom_point(size = 1) +
geom_text(aes(label = c("c", "b", "a", "a", "a",
"b", "a", "a", "a", "a",
"b", "a", "a", "a", "a")),
vjust = -1, size = 4) +
scale_x_continuous(breaks = c(0, 0.25, 0.50, 0.75, 1), limits = c(0, 1),
labels = scales::percent_format(scale = 100, suffix = "")) +
labs(#title = "Waterhemp Plant Density Reduction - PRE",
x = "Plant Density Reduction (%)",
y = "Herbicide") +
facet_grid(~ Rate, labeller = label_both) +
theme_bw() +
theme (plot.title = element_text(face = "bold", hjust = 0.5, size = 22, colour = "darkgreen"),
axis.title = element_text(face = "bold", size = 18, colour = "darkgreen"),
axis.text = element_text(face = "bold", size = 13, colour = "black"),
strip.text = element_text(face = "bold", size = 13, colour = "black"))
library(tidyverse)
library(ggplot2)
library(car)
library(emmeans)
library(multcompView)
library(glmmTMB)
library(ggpubr)
library(tidyverse)
library(tidyverse)
library(ggplot2)
library(car)
library(emmeans)
library(multcompView)
library(glmmTMB)
library(ggpubr)
library(tidyverse)
library(tidyverse)
library(ggplot2)
library(car)
library(emmeans)
library(multcompView)
library(glmmTMB)
library(ggpubr)
